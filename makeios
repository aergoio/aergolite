#!/bin/bash

PLATFORMPATH="/Applications/Xcode.app/Contents/Developer/Platforms"
TOOLSPATH="/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin"
export IPHONEOS_DEPLOYMENT_TARGET="8.0"
pwd=`pwd`

findLatestSDKVersion()
{
    sdks=`ls $PLATFORMPATH/$1.platform/Developer/SDKs`
    arr=()
    for sdk in $sdks
    do
       echo $sdk
       arr[${#arr[@]}]=$sdk
    done

    # Last item will be the current SDK, since it is alpha ordered
    count=${#arr[@]}
    if [ $count -gt 0 ]; then
       sdk=${arr[$count-1]:${#1}}
       num=`expr ${#sdk}-4`
       SDKVERSION=${sdk:0:$num}
    else
       SDKVERSION="8.0"
    fi
}

buildit()
{
    target=$1
    platform=$2

    echo ""
    echo "-------------------------------------------------------------------------------"
    echo " Compiling for $platform on $target"
    echo "-------------------------------------------------------------------------------"

    export PLATFORM=$platform
    export CC="$(xcrun -sdk iphoneos -find clang)"
    export STRIP="$(xcrun -sdk iphoneos -find strip)"
    export LD="$(xcrun -sdk iphoneos -find ld)"
    export CPP="$CC -E"
    export CFLAGS="-arch ${target} -isysroot $PLATFORMPATH/$platform.platform/Developer/SDKs/$platform$SDKVERSION.sdk -miphoneos-version-min=$SDKMINVERSION -I../binn/src -I../libuv/include"
    export AR=$(xcrun -sdk iphoneos -find ar)
    export RANLIB=$(xcrun -sdk iphoneos -find ranlib)
    export CPPFLAGS="-arch ${target} -isysroot $PLATFORMPATH/$platform.platform/Developer/SDKs/$platform$SDKVERSION.sdk -miphoneos-version-min=$SDKMINVERSION"
    export LDFLAGS="-arch ${target} -isysroot $PLATFORMPATH/$platform.platform/Developer/SDKs/$platform$SDKVERSION.sdk -L."  # -L../binn/output/$target/lib -L../libuv/output/$target/lib

    #export LIBFLAGS="-DSQLITE_ENABLE_LOCKING_STYLE=0"  -- to remove warning on getuuid()

    #export prefix="$pwd/output/$target"

    make clean
    make ios
    #make install

    mkdir -p $pwd/ios/$target
    mv liblitesync.a $pwd/ios/$target
    mv liblitesync.dylib $pwd/ios/$target
}

cp ../binn/ios/libbinn.a .
cp ../binn/ios/libbinn.dylib .
cp ../libuv/ios/libuv.a .
cp ../libuv/ios/libuv.1.dylib libuv.dylib

install_name_tool -id @rpath/libuv.dylib libuv.dylib
install_name_tool -id @rpath/libbinn.dylib libbinn.dylib

findLatestSDKVersion iPhoneOS
SDKMINVERSION="8.0"

buildit armv7 iPhoneOS
buildit armv7s iPhoneOS
buildit arm64 iPhoneOS
buildit i386 iPhoneSimulator
buildit x86_64 iPhoneSimulator

LIPO=$(xcrun -sdk iphoneos -find lipo)
$LIPO -create $pwd/ios/armv7/liblitesync.a  $pwd/ios/armv7s/liblitesync.a $pwd/ios/arm64/liblitesync.a $pwd/ios/x86_64/liblitesync.a $pwd/ios/i386/liblitesync.a -output liblitesync.a
$LIPO -create $pwd/ios/armv7/liblitesync.dylib  $pwd/ios/armv7s/liblitesync.dylib $pwd/ios/arm64/liblitesync.dylib $pwd/ios/x86_64/liblitesync.dylib $pwd/ios/i386/liblitesync.dylib -output liblitesync.dylib

#install_name_tool -id @rpath/libuv.dylib libuv.dylib
#install_name_tool -id @rpath/libbinn.dylib libbinn.dylib
#install_name_tool -id @rpath/liblitesync.dylib liblitesync.dylib
#install_name_tool -change libuv.dylib @rpath/libuv.dylib liblitesync.dylib
#install_name_tool -change libbinn.dylib @rpath/libbinn.dylib liblitesync.dylib

install_name_tool -id @rpath/liblitesync.dylib liblitesync.dylib

cp libbinn.a $pwd/ios/
cp libbinn.dylib $pwd/ios/
cp libuv.a $pwd/ios/
cp libuv.1.dylib libuv.dylib $pwd/ios/
cp liblitesync.a $pwd/ios/
cp liblitesync.dylib $pwd/ios/
make clean

echo "done."
